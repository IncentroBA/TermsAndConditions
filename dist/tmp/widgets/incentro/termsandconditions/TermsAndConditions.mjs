import { useState, useEffect, createElement } from 'react';

function TermsAndConditions({
  labelTextBefore,
  labelTextAfter,
  termsAction,
  termsBoolean,
  termsText,
  ...rest
}) {
  const id = rest.name || "";
  const style = rest.class || "";
  const [canRender, setCanRender] = useState(false);
  const [disabledValue, setDisabledValue] = useState(false);
  const [currentValue, setCurrentValue] = useState(null);
  useEffect(() => {
    if (termsBoolean.status === "available") {
      setCurrentValue(termsBoolean.value || currentValue);
      if (termsBoolean.readOnly === true) {
        setDisabledValue(true);
      }
      setCanRender(true);
    }
  }, [currentValue, termsBoolean]);
  function onClickTerms() {
    if (termsAction && termsAction.canExecute) {
      termsAction.execute();
    }
  }
  function onChangeInput(event) {
    setCurrentValue(Boolean(event.target.checked));
    termsBoolean.setValue(Boolean(event.target.checked));
  }
  if (canRender) {
    return createElement("div", {
      className: `mx-checkbox form-group terms-and-conditions ${style} ${termsBoolean.validation ? "has-error" : ""}`
    }, createElement("div", {
      className: "terms-and-conditions__wrapper"
    }, createElement("input", {
      type: "checkbox",
      id: id,
      onChange: onChangeInput,
      disabled: disabledValue,
      checked: currentValue
    }), createElement("label", {
      className: "control-label terms-and-conditions__label",
      htmlFor: id
    }, createElement("span", null, labelTextBefore?.value, " "), createElement("a", {
      className: "terms-and-conditions__action",
      onClick: onClickTerms
    }, termsText?.value), createElement("span", null, " ", labelTextAfter?.value))), termsBoolean.validation && createElement("div", {
      className: "alert alert-danger mx-validation-message",
      role: "alert"
    }, "\xA0", termsBoolean.validation));
  } else return createElement("div", null);
}

export { TermsAndConditions };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybXNBbmRDb25kaXRpb25zLm1qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL1Rlcm1zQW5kQ29uZGl0aW9ucy5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi91aS9UZXJtc0FuZENvbmRpdGlvbnMuY3NzXCI7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBUZXJtc0FuZENvbmRpdGlvbnMoeyBsYWJlbFRleHRCZWZvcmUsIGxhYmVsVGV4dEFmdGVyLCB0ZXJtc0FjdGlvbiwgdGVybXNCb29sZWFuLCB0ZXJtc1RleHQsIC4uLnJlc3QgfSkge1xuICAgIGNvbnN0IGlkID0gcmVzdC5uYW1lIHx8IFwiXCI7XG4gICAgY29uc3Qgc3R5bGUgPSByZXN0LmNsYXNzIHx8IFwiXCI7XG4gICAgY29uc3QgW2NhblJlbmRlciwgc2V0Q2FuUmVuZGVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbZGlzYWJsZWRWYWx1ZSwgc2V0RGlzYWJsZWRWYWx1ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2N1cnJlbnRWYWx1ZSwgc2V0Q3VycmVudFZhbHVlXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHRlcm1zQm9vbGVhbi5zdGF0dXMgPT09IFwiYXZhaWxhYmxlXCIpIHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRWYWx1ZSh0ZXJtc0Jvb2xlYW4udmFsdWUgfHwgY3VycmVudFZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKHRlcm1zQm9vbGVhbi5yZWFkT25seSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHNldERpc2FibGVkVmFsdWUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRDYW5SZW5kZXIodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9LCBbY3VycmVudFZhbHVlLCB0ZXJtc0Jvb2xlYW5dKTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2tUZXJtcygpIHtcbiAgICAgICAgaWYgKHRlcm1zQWN0aW9uICYmIHRlcm1zQWN0aW9uLmNhbkV4ZWN1dGUpIHtcbiAgICAgICAgICAgIHRlcm1zQWN0aW9uLmV4ZWN1dGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ2hhbmdlSW5wdXQoZXZlbnQpIHtcbiAgICAgICAgc2V0Q3VycmVudFZhbHVlKEJvb2xlYW4oZXZlbnQudGFyZ2V0LmNoZWNrZWQpKTtcbiAgICAgICAgdGVybXNCb29sZWFuLnNldFZhbHVlKEJvb2xlYW4oZXZlbnQudGFyZ2V0LmNoZWNrZWQpKTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgbXgtY2hlY2tib3ggZm9ybS1ncm91cCB0ZXJtcy1hbmQtY29uZGl0aW9ucyAke3N0eWxlfSAke1xuICAgICAgICAgICAgICAgICAgICB0ZXJtc0Jvb2xlYW4udmFsaWRhdGlvbiA/IFwiaGFzLWVycm9yXCIgOiBcIlwiXG4gICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXJtcy1hbmQtY29uZGl0aW9uc19fd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2VJbnB1dH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZFZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17Y3VycmVudFZhbHVlfVxuICAgICAgICAgICAgICAgICAgICA+PC9pbnB1dD5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWwgdGVybXMtYW5kLWNvbmRpdGlvbnNfX2xhYmVsXCIgaHRtbEZvcj17aWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2xhYmVsVGV4dEJlZm9yZT8udmFsdWV9IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInRlcm1zLWFuZC1jb25kaXRpb25zX19hY3Rpb25cIiBvbkNsaWNrPXtvbkNsaWNrVGVybXN9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0ZXJtc1RleHQ/LnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHtsYWJlbFRleHRBZnRlcj8udmFsdWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHt0ZXJtc0Jvb2xlYW4udmFsaWRhdGlvbiAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIG14LXZhbGlkYXRpb24tbWVzc2FnZVwiIHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7e3Rlcm1zQm9vbGVhbi52YWxpZGF0aW9ufVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIHJldHVybiA8ZGl2PjwvZGl2Pjtcbn1cbiJdLCJuYW1lcyI6WyJUZXJtc0FuZENvbmRpdGlvbnMiLCJsYWJlbFRleHRCZWZvcmUiLCJsYWJlbFRleHRBZnRlciIsInRlcm1zQWN0aW9uIiwidGVybXNCb29sZWFuIiwidGVybXNUZXh0IiwicmVzdCIsImlkIiwibmFtZSIsInN0eWxlIiwiY2xhc3MiLCJjYW5SZW5kZXIiLCJzZXRDYW5SZW5kZXIiLCJ1c2VTdGF0ZSIsImRpc2FibGVkVmFsdWUiLCJzZXREaXNhYmxlZFZhbHVlIiwiY3VycmVudFZhbHVlIiwic2V0Q3VycmVudFZhbHVlIiwidXNlRWZmZWN0Iiwic3RhdHVzIiwidmFsdWUiLCJyZWFkT25seSIsIm9uQ2xpY2tUZXJtcyIsImNhbkV4ZWN1dGUiLCJleGVjdXRlIiwib25DaGFuZ2VJbnB1dCIsImV2ZW50IiwiQm9vbGVhbiIsInRhcmdldCIsImNoZWNrZWQiLCJzZXRWYWx1ZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJ2YWxpZGF0aW9uIiwidHlwZSIsIm9uQ2hhbmdlIiwiZGlzYWJsZWQiLCJodG1sRm9yIiwib25DbGljayIsInJvbGUiXSwibWFwcGluZ3MiOiI7O0FBR08sU0FBU0Esa0JBQWtCQSxDQUFDO0VBQUVDLGVBQWU7RUFBRUMsY0FBYztFQUFFQyxXQUFXO0VBQUVDLFlBQVk7RUFBRUMsU0FBUztFQUFFLEdBQUdDLElBQUFBO0FBQUssQ0FBQyxFQUFFO0FBQ25ILEVBQUEsTUFBTUMsRUFBRSxHQUFHRCxJQUFJLENBQUNFLElBQUksSUFBSSxFQUFFLENBQUE7QUFDMUIsRUFBQSxNQUFNQyxLQUFLLEdBQUdILElBQUksQ0FBQ0ksS0FBSyxJQUFJLEVBQUUsQ0FBQTtFQUM5QixNQUFNLENBQUNDLFNBQVMsRUFBRUMsWUFBWSxDQUFDLEdBQUdDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtFQUNqRCxNQUFNLENBQUNDLGFBQWEsRUFBRUMsZ0JBQWdCLENBQUMsR0FBR0YsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0VBQ3pELE1BQU0sQ0FBQ0csWUFBWSxFQUFFQyxlQUFlLENBQUMsR0FBR0osUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBRXRESyxFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUNaLElBQUEsSUFBSWQs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
