define(['exports', 'react'], (function (exports, react) { 'use strict';

    function TermsAndConditions({
      labelTextBefore,
      labelTextAfter,
      termsAction,
      termsBoolean,
      termsText,
      ...rest
    }) {
      const id = rest.name || "";
      const style = rest.class || "";
      const [canRender, setCanRender] = react.useState(false);
      const [disabledValue, setDisabledValue] = react.useState(false);
      const [currentValue, setCurrentValue] = react.useState(null);
      react.useEffect(() => {
        if (termsBoolean.status === "available") {
          setCurrentValue(termsBoolean.value || currentValue);
          if (termsBoolean.readOnly === true) {
            setDisabledValue(true);
          }
          setCanRender(true);
        }
      }, [currentValue, termsBoolean]);
      function onClickTerms() {
        if (termsAction && termsAction.canExecute) {
          termsAction.execute();
        }
      }
      function onChangeInput(event) {
        setCurrentValue(Boolean(event.target.checked));
        termsBoolean.setValue(Boolean(event.target.checked));
      }
      if (canRender) {
        return react.createElement("div", {
          className: `mx-checkbox form-group terms-and-conditions ${style} ${termsBoolean.validation ? "has-error" : ""}`
        }, react.createElement("div", {
          className: "terms-and-conditions__wrapper"
        }, react.createElement("input", {
          type: "checkbox",
          id: id,
          onChange: onChangeInput,
          disabled: disabledValue,
          checked: currentValue
        }), react.createElement("label", {
          className: "control-label terms-and-conditions__label",
          htmlFor: id
        }, react.createElement("span", null, labelTextBefore?.value, " "), react.createElement("a", {
          className: "terms-and-conditions__action",
          onClick: onClickTerms
        }, termsText?.value), react.createElement("span", null, " ", labelTextAfter?.value))), termsBoolean.validation && react.createElement("div", {
          className: "alert alert-danger mx-validation-message",
          role: "alert"
        }, "\xA0", termsBoolean.validation));
      } else return react.createElement("div", null);
    }

    exports.TermsAndConditions = TermsAndConditions;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybXNBbmRDb25kaXRpb25zLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvVGVybXNBbmRDb25kaXRpb25zLmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL3VpL1Rlcm1zQW5kQ29uZGl0aW9ucy5jc3NcIjtcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFRlcm1zQW5kQ29uZGl0aW9ucyh7IGxhYmVsVGV4dEJlZm9yZSwgbGFiZWxUZXh0QWZ0ZXIsIHRlcm1zQWN0aW9uLCB0ZXJtc0Jvb2xlYW4sIHRlcm1zVGV4dCwgLi4ucmVzdCB9KSB7XG4gICAgY29uc3QgaWQgPSByZXN0Lm5hbWUgfHwgXCJcIjtcbiAgICBjb25zdCBzdHlsZSA9IHJlc3QuY2xhc3MgfHwgXCJcIjtcbiAgICBjb25zdCBbY2FuUmVuZGVyLCBzZXRDYW5SZW5kZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtkaXNhYmxlZFZhbHVlLCBzZXREaXNhYmxlZFZhbHVlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbY3VycmVudFZhbHVlLCBzZXRDdXJyZW50VmFsdWVdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAodGVybXNCb29sZWFuLnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIikge1xuICAgICAgICAgICAgc2V0Q3VycmVudFZhbHVlKHRlcm1zQm9vbGVhbi52YWx1ZSB8fCBjdXJyZW50VmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAodGVybXNCb29sZWFuLnJlYWRPbmx5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc2V0RGlzYWJsZWRWYWx1ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldENhblJlbmRlcih0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtjdXJyZW50VmFsdWUsIHRlcm1zQm9vbGVhbl0pO1xuXG4gICAgZnVuY3Rpb24gb25DbGlja1Rlcm1zKCkge1xuICAgICAgICBpZiAodGVybXNBY3Rpb24gJiYgdGVybXNBY3Rpb24uY2FuRXhlY3V0ZSkge1xuICAgICAgICAgICAgdGVybXNBY3Rpb24uZXhlY3V0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2VJbnB1dChldmVudCkge1xuICAgICAgICBzZXRDdXJyZW50VmFsdWUoQm9vbGVhbihldmVudC50YXJnZXQuY2hlY2tlZCkpO1xuICAgICAgICB0ZXJtc0Jvb2xlYW4uc2V0VmFsdWUoQm9vbGVhbihldmVudC50YXJnZXQuY2hlY2tlZCkpO1xuICAgIH1cblxuICAgIGlmIChjYW5SZW5kZXIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BteC1jaGVja2JveCBmb3JtLWdyb3VwIHRlcm1zLWFuZC1jb25kaXRpb25zICR7c3R5bGV9ICR7XG4gICAgICAgICAgICAgICAgICAgIHRlcm1zQm9vbGVhbi52YWxpZGF0aW9uID8gXCJoYXMtZXJyb3JcIiA6IFwiXCJcbiAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRlcm1zLWFuZC1jb25kaXRpb25zX193cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZUlucHV0fVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkVmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtjdXJyZW50VmFsdWV9XG4gICAgICAgICAgICAgICAgICAgID48L2lucHV0PlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbCB0ZXJtcy1hbmQtY29uZGl0aW9uc19fbGFiZWxcIiBodG1sRm9yPXtpZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57bGFiZWxUZXh0QmVmb3JlPy52YWx1ZX0gPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwidGVybXMtYW5kLWNvbmRpdGlvbnNfX2FjdGlvblwiIG9uQ2xpY2s9e29uQ2xpY2tUZXJtc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Rlcm1zVGV4dD8udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ge2xhYmVsVGV4dEFmdGVyPy52YWx1ZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge3Rlcm1zQm9vbGVhbi52YWxpZGF0aW9uICYmIChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGVydCBhbGVydC1kYW5nZXIgbXgtdmFsaWRhdGlvbi1tZXNzYWdlXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDt7dGVybXNCb29sZWFuLnZhbGlkYXRpb259XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9IGVsc2UgcmV0dXJuIDxkaXY+PC9kaXY+O1xufVxuIl0sIm5hbWVzIjpbIlRlcm1zQW5kQ29uZGl0aW9ucyIsImxhYmVsVGV4dEJlZm9yZSIsImxhYmVsVGV4dEFmdGVyIiwidGVybXNBY3Rpb24iLCJ0ZXJtc0Jvb2xlYW4iLCJ0ZXJtc1RleHQiLCJyZXN0IiwiaWQiLCJuYW1lIiwic3R5bGUiLCJjbGFzcyIsImNhblJlbmRlciIsInNldENhblJlbmRlciIsInVzZVN0YXRlIiwiZGlzYWJsZWRWYWx1ZSIsInNldERpc2FibGVkVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJzZXRDdXJyZW50VmFsdWUiLCJ1c2VFZmZlY3QiLCJzdGF0dXMiLCJ2YWx1ZSIsInJlYWRPbmx5Iiwib25DbGlja1Rlcm1zIiwiY2FuRXhlY3V0ZSIsImV4ZWN1dGUiLCJvbkNoYW5nZUlucHV0IiwiZXZlbnQiLCJCb29sZWFuIiwidGFyZ2V0IiwiY2hlY2tlZCIsInNldFZhbHVlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInZhbGlkYXRpb24iLCJ0eXBlIiwib25DaGFuZ2UiLCJkaXNhYmxlZCIsImh0bWxGb3IiLCJvbkNsaWNrIiwicm9sZSJdLCJtYXBwaW5ncyI6Ijs7SUFHTyxTQUFTQSxrQkFBa0JBLENBQUM7TUFBRUMsZUFBZTtNQUFFQyxjQUFjO01BQUVDLFdBQVc7TUFBRUMsWUFBWTtNQUFFQyxTQUFTO01BQUUsR0FBR0MsSUFBQUE7SUFBSyxDQUFDLEVBQUU7SUFDbkgsRUFBQSxNQUFNQyxFQUFFLEdBQUdELElBQUksQ0FBQ0UsSUFBSSxJQUFJLEVBQUUsQ0FBQTtJQUMxQixFQUFBLE1BQU1DLEtBQUssR0FBR0gsSUFBSSxDQUFDSSxLQUFLLElBQUksRUFBRSxDQUFBO01BQzlCLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFQyxZQUFZLENBQUMsR0FBR0MsY0FBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO01BQ2pELE1BQU0sQ0FBQ0MsYUFBYSxFQUFFQyxnQkFBZ0IsQ0FBQyxHQUFHRixjQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7TUFDekQsTUFBTSxDQUFDRyxZQUFZLEVBQUVDLGVBQWUsQ0FBQyxHQUFHSixjQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFdERLLEVBQUFBLGVBQVMsQ0FBQyxNQUFNO0lBQ1osSUFBQSxJQUFJZCxZ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
