define(['exports', 'react'], (function (exports, react) { 'use strict';

    function TermsAndConditions({
      labelTextBefore,
      labelTextAfter,
      termsAction,
      termsBoolean,
      termsText,
      ...rest
    }) {
      const id = rest.name || "";
      const style = rest.class || "";
      const [canRender, setCanRender] = react.useState(false);
      const [disabledValue, setDisabledValue] = react.useState(false);
      const [currentValue, setCurrentValue] = react.useState(null);
      react.useEffect(() => {
        if (termsBoolean.status === "available") {
          setCurrentValue(currentValue || termsBoolean.value);
          if (termsBoolean.readOnly === true) {
            setDisabledValue(true);
          }
          setCanRender(true);
        }
      }, [currentValue, termsBoolean]);
      function onClickTerms() {
        if (termsAction && termsAction.canExecute) {
          termsAction.execute();
        }
      }
      function onChangeInput(event) {
        setCurrentValue(Boolean(event.target.checked));
        termsBoolean.setValue(Boolean(event.target.checked));
      }
      if (canRender) {
        return react.createElement("div", {
          className: `mx-checkbox form-group terms-and-conditions ${style}`
        }, react.createElement("input", {
          type: "checkbox",
          id: id,
          onChange: onChangeInput,
          disabled: disabledValue,
          value: currentValue
        }), react.createElement("label", {
          className: "control-label terms-and-conditions__label",
          htmlFor: id
        }, react.createElement("span", null, labelTextBefore?.value, " "), react.createElement("a", {
          className: "terms-and-conditions__action",
          onClick: onClickTerms
        }, termsText?.value), react.createElement("span", null, " ", labelTextAfter?.value)));
      } else return react.createElement("div", null);
    }

    exports.TermsAndConditions = TermsAndConditions;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybXNBbmRDb25kaXRpb25zLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvVGVybXNBbmRDb25kaXRpb25zLmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL3VpL1Rlcm1zQW5kQ29uZGl0aW9ucy5jc3NcIjtcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFRlcm1zQW5kQ29uZGl0aW9ucyh7IGxhYmVsVGV4dEJlZm9yZSwgbGFiZWxUZXh0QWZ0ZXIsIHRlcm1zQWN0aW9uLCB0ZXJtc0Jvb2xlYW4sIHRlcm1zVGV4dCwgLi4ucmVzdCB9KSB7XG4gICAgY29uc3QgaWQgPSByZXN0Lm5hbWUgfHwgXCJcIjtcbiAgICBjb25zdCBzdHlsZSA9IHJlc3QuY2xhc3MgfHwgXCJcIjtcbiAgICBjb25zdCBbY2FuUmVuZGVyLCBzZXRDYW5SZW5kZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtkaXNhYmxlZFZhbHVlLCBzZXREaXNhYmxlZFZhbHVlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbY3VycmVudFZhbHVlLCBzZXRDdXJyZW50VmFsdWVdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAodGVybXNCb29sZWFuLnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIikge1xuICAgICAgICAgICAgc2V0Q3VycmVudFZhbHVlKGN1cnJlbnRWYWx1ZSB8fCB0ZXJtc0Jvb2xlYW4udmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAodGVybXNCb29sZWFuLnJlYWRPbmx5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc2V0RGlzYWJsZWRWYWx1ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldENhblJlbmRlcih0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtjdXJyZW50VmFsdWUsIHRlcm1zQm9vbGVhbl0pO1xuXG4gICAgZnVuY3Rpb24gb25DbGlja1Rlcm1zKCkge1xuICAgICAgICBpZiAodGVybXNBY3Rpb24gJiYgdGVybXNBY3Rpb24uY2FuRXhlY3V0ZSkge1xuICAgICAgICAgICAgdGVybXNBY3Rpb24uZXhlY3V0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2VJbnB1dChldmVudCkge1xuICAgICAgICBzZXRDdXJyZW50VmFsdWUoQm9vbGVhbihldmVudC50YXJnZXQuY2hlY2tlZCkpO1xuICAgICAgICB0ZXJtc0Jvb2xlYW4uc2V0VmFsdWUoQm9vbGVhbihldmVudC50YXJnZXQuY2hlY2tlZCkpO1xuICAgIH1cblxuICAgIGlmIChjYW5SZW5kZXIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbXgtY2hlY2tib3ggZm9ybS1ncm91cCB0ZXJtcy1hbmQtY29uZGl0aW9ucyAke3N0eWxlfWB9PlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZUlucHV0fVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWRWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2N1cnJlbnRWYWx1ZX1cbiAgICAgICAgICAgICAgICA+PC9pbnB1dD5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbCB0ZXJtcy1hbmQtY29uZGl0aW9uc19fbGFiZWxcIiBodG1sRm9yPXtpZH0+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPntsYWJlbFRleHRCZWZvcmU/LnZhbHVlfSA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInRlcm1zLWFuZC1jb25kaXRpb25zX19hY3Rpb25cIiBvbkNsaWNrPXtvbkNsaWNrVGVybXN9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3Rlcm1zVGV4dD8udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHtsYWJlbFRleHRBZnRlcj8udmFsdWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9IGVsc2UgcmV0dXJuIDxkaXY+PC9kaXY+O1xufVxuIl0sIm5hbWVzIjpbIlRlcm1zQW5kQ29uZGl0aW9ucyIsImxhYmVsVGV4dEJlZm9yZSIsImxhYmVsVGV4dEFmdGVyIiwidGVybXNBY3Rpb24iLCJ0ZXJtc0Jvb2xlYW4iLCJ0ZXJtc1RleHQiLCJyZXN0IiwiaWQiLCJuYW1lIiwic3R5bGUiLCJjbGFzcyIsImNhblJlbmRlciIsInNldENhblJlbmRlciIsInVzZVN0YXRlIiwiZGlzYWJsZWRWYWx1ZSIsInNldERpc2FibGVkVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJzZXRDdXJyZW50VmFsdWUiLCJ1c2VFZmZlY3QiLCJzdGF0dXMiLCJ2YWx1ZSIsInJlYWRPbmx5Iiwib25DbGlja1Rlcm1zIiwiY2FuRXhlY3V0ZSIsImV4ZWN1dGUiLCJvbkNoYW5nZUlucHV0IiwiZXZlbnQiLCJCb29sZWFuIiwidGFyZ2V0IiwiY2hlY2tlZCIsInNldFZhbHVlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInR5cGUiLCJvbkNoYW5nZSIsImRpc2FibGVkIiwiaHRtbEZvciIsIm9uQ2xpY2siXSwibWFwcGluZ3MiOiI7O0lBR08sU0FBU0Esa0JBQWtCQSxDQUFDO01BQUVDLGVBQWU7TUFBRUMsY0FBYztNQUFFQyxXQUFXO01BQUVDLFlBQVk7TUFBRUMsU0FBUztNQUFFLEdBQUdDLElBQUFBO0lBQUssQ0FBQyxFQUFFO0lBQ25ILEVBQUEs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
